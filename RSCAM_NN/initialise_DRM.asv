function err = initialise_DRM(m, NSteps, eps, beta, to_plot)
    
    x = linspace(0, 1, 100);
    
    % Function to approximate
    % d^2f_dx^2 = g
    g = ones(100, 1);
    sol = @(x) 1/2 * (x - x .^2);
    
    % Inital weights and biases
    % Note: There is 1 hidden layer with m nodes
    rng(10);
    W1 = randn(m, 1);
    W2 = randn(1, m);
    B1 = randn(m, 1);
    B2 = randn(1, 1);
    
    % Update parameters for final weights and biases
    [W1, W2, B1, B2] = update_params(W1, W2, B1, B2, x, g, NSteps, eps, beta);
    
    % Run final approximation
    x = linspace(0, 1, 10000);
    approx = network_layer(x, W1, W2, B1, B2);
    
    if to_plot == true
        % Plot against original function
        figure(1)
        plot(x, approx, 'r--')
        hold on
        plot(x, sol(x))
        hold off

        legend('Approximation','Solution')
        title('DRM approximation against analytical solution for -\Deltau=1')
        xlabel('x')
        ylabel('u(x)')
    end 
    
    err = abs(approx - sol(x)';
end

function x_out = network_layer(x, W1, W2, B1, B2)
    % Computation of hidden layer
    % W, B are weights and biases for the hidden layer and output
    
    x_next = zeros(length(x), 1);
    x_out = zeros(length(x), 1);
    
    for idx = 1:length(x)
        z = W1*x(idx) + B1;

        % Activation (sigmoid function)
        x_next = 1./(1 + exp(-z));

        % Compute final output
        x_out(idx) = W2*x_next + B2; 
    end
end

function [W1, W2, B1, B2] = update_params(W1, W2, B1, B2, x, g, NSteps, eps, beta)

    for N=1:NSteps
        for idx=1:length(x)
        
            % BC's - at 0 and 1
            au0 = 1./(1 + exp(-(W1*x(1) + B1)));
            u0 = W2 * au0 + B2;
            au1 = 1./(1 + exp(-(W1*x(end)+ B1)));
            u1 = W2 * au1 + B2;
        
            % Activation function
            a = 1./(1 + exp(-(W1*x(idx) + B1)));
            u = W2 * a + B2;
            
            % partial derivative of C wrt u
            gradu = W2 * (W1 .* a .* (1-a));

            % Partial derivatives of cost function
            dC_dw1 = abs(gradu)*W2*(a .* (1-a));
            dC_dw1 = dC_dw1 + gradu*W2*(W1.*a.*(1-a).*(1-a)*x(idx));
            dC_dw1 = dC_dw1 + gradu*W2*(W1.*a.*a.*(a-1)*x(idx));
            dC_dw1 = dC_dw1 - g(idx)*W2*(a.*(1-a)*x(idx));
            dC_dw1 = dC_dw1 + 2*beta*(u0*W2*(au0.*(1-au0)*x(1)) + u1*W2*(au1.*(1-au1)*x(end)));
            
            dC_db1 = abs(gradu) * W2*(W1.*a.*(1-a).*(1-a));
            dC_db1 = dC_db1 + abs(gradu)*W2*(W1.*a.*a.*(a-1));
            dC_db1 = dC_db1 - g(idx)*W2*(a.*(1-a));
            dC_db1 = dC_db1 + 2*beta *(u0*W2*(au0.*(1-au0))+u1*W2*(au1.*(1-au1)));
            
            dC_dw2 = abs(gradu)*(W1.*a.*(1-a))'-g(idx)*a'+beta*2*(u0*au0'+u1*au1');
            dC_db2 = -g(idx) +beta*2*(u0 + u1);
            
            % Updating weights and biases
            W1 = W1 - eps*dC_dw1;
            B1 = B1 - eps*dC_db1;
            W2 = W2 - eps*dC_dw2;
            B2 = B2 - eps*dC_db2;
        end
    end
    
end


